<?xml version="1.0" encoding="UTF-8"?>
<beans default-lazy-init="true" xmlns="http://www.springframework.org/schema/beans" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"  	xmlns:mongo="http://www.springframework.org/schema/data/mongo"		
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
			http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
		http://www.springframework.org/schema/jee 
			http://www.springframework.org/schema/jee/spring-jee-3.1.xsd 
		http://www.springframework.org/schema/tx 
			http://www.springframework.org/schema/tx/spring-tx-3.1.xsd 
		http://www.springframework.org/schema/context 
			http://www.springframework.org/schema/context/spring-context-3.1.xsd  
		http://www.springframework.org/schema/cache 
			http://www.springframework.org/schema/cache/spring-cache-3.1.xsd    
		http://www.springframework.org/schema/data/mongo
          	http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd  
		http://www.springframework.org/schema/aop 
			http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">

	<!-- 启用注解 -->
	<context:annotation-config />
	
	<!-- 自动扫描 -->
	<context:component-scan base-package="hyman.study.ssh" />
	
	<!-- 自动代理 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	
	<!-- 引入配置文件 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:redis/redis.properties</value>
			</list>
		</property>
	</bean>
	
	
	<!-- 配置数据源datasource -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property>    
		<property name="url" value="jdbc:mysql://localhost:3306/sshm?serverTimezone=UTC"></property>    
		<property name="username" value="root"></property>
		<property name="password" value="qwer1234"></property>
		<!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="10" />
        <property name="minIdle" value="10" />
        <property name="maxActive" value="20" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />
        <!-- 配置监控统计拦截的filters -->
  		<property name="filters" value="stat" />
    </bean>
	
	
	<!-- 配置mybatis -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!-- 配置文件位置 -->
		<property name="configLocation" value="classpath:mapper/mybatis-config.xml"></property>
		<!-- mybatis xml文件位置 -->
		<property name="mapperLocations" value="classpath:mapper/*Mapper.xml"></property>
	</bean>
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描mybatis接口类的目录 -->
		<property name="basePackage" value="hyman.study.ssh.mapper"></property>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryBean"></property>
	</bean>
	
	
	
	
	
	
	
	
	
	<!-- 配置session factory -->
	<!-- <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.cache.use_second_level_cache">false</prop>
				<prop key="hibernate.cache.use_query_cache">false</prop>
			</props>
		</property>
		配置需要扫描的hibernate实体类所在包
		<property name="packagesToScan">
			<list>
				<value>hyman.study.ssh.model</value>
			</list>
		</property>
	</bean> -->
	
	
	
	<!-- 配置Spring声明式事务 -->
    <!-- <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean> 
   	<tx:annotation-driven transaction-manager="transactionManager"/>
   	 配置事务事务属性
   	<tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
        	如果是get开头的方法，代表是获取数据
            <tx:method name="get*" read-only="true"/>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>
     -->
	<!-- <bean id="hibernateTemplate" class="org.springframework.orm.hibernate5.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean> -->
    
   	<!-- 配置事务切点，并把切点和事务属性关联起来 -->
   	<!-- <aop:config>
        <aop:pointcut expression="execution(* hyman.study..*.*(..))" id="txPointcut"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>
	 -->



	<!-- 配置redis -->
	<!-- 配置JedisPoolConfig实例 -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="${redis.maxIdle}"></property>
		<property name="maxTotal" value="${redis.maxActive}"></property>
		<property name="maxWaitMillis" value="${redis.maxWait}"></property>
		<property name="testOnBorrow" value="${redis.testOnBorrow}"></property>
	</bean>

	<!-- 配置JedisConnectionFactory -->
	<bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.host}"></property>
		<property name="port" value="${redis.port}"></property>
		<property name="port" value="${redis.port}"></property>
		<property name="database" value="${redis.dbIndex}"></property>
		<property name="poolConfig" ref="poolConfig"></property>
	</bean>

	<!-- 配置redisTemplate -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="connectionFactory"></property>
	</bean>
	
	<!-- 配置redisCacheManager -->
	<bean id="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
		<constructor-arg name="redisOperations" ref="redisTemplate"></constructor-arg>
		<property name="defaultExpiration" value="${redis.expiration}"></property>
	</bean>
	
	<!-- 配置RedisCacheConfig -->
	<bean id="redisCacheConfig" class="hyman.study.ssh.utils.RedisCacheConfig">
		<constructor-arg ref="jedisConnectionFactory" />
		<constructor-arg ref="redisTemplate" />
		<constructor-arg ref="redisCacheManager" />
	</bean>

	<!-- redis配置完毕 -->



</beans>